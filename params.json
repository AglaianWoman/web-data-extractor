{
  "name": "Web-data-extractor",
  "tagline": "Extracting structured data with Jquery Selector, XPath or JsonPath from common web format like HTML, XML and JSON.",
  "body": "# web-data-extractor \r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/im.nll.data/extractor/badge.svg)](https://maven-badges.herokuapp.com/maven-central/im.nll.data/extractor/)\r\n[![Build Status](https://travis-ci.org/fivesmallq/web-data-extractor.svg)](https://travis-ci.org/fivesmallq/web-data-extractor)\r\n[![codecov.io](http://codecov.io/github/fivesmallq/web-data-extractor/coverage.svg?branch=master)](http://codecov.io/github/fivesmallq/web-data-extractor?branch=master)\r\n[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\nExtracting and parsing structured data with Jquery Selector, XPath or JsonPath from common web format like HTML, XML and JSON.\r\n\r\nImplements:\r\n\r\n * Jquery Selector - [Jsoup](https://github.com/jhy/jsoup) and [Jerry](http://jodd.org/doc/jerry/index.html)\r\n * XPath -  [Jdom2](https://github.com/hunterhacker/jdom/)\r\n * JsonPath - [JsonPath](https://github.com/jayway/JsonPath)\r\n\r\n\r\n###Usage\r\nTo add a dependency on Web-Data-Extractor using Maven, use the following:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>im.nll.data</groupId>\r\n    <artifactId>extractor</artifactId>\r\n    <version>0.9.6</version>\r\n</dependency>\r\n```\r\n\r\nTo add a dependency using Gradle:\r\n\r\n```\r\ndependencies {\r\n  compile 'im.nll.data:extractor:0.9.6'\r\n}\r\n```\r\n\r\n\r\n##Examples\r\n\r\n###extract single data\r\n\r\n````java\r\nString followers = Extractors.on(baseHtml)\r\n                   .extract(new SelectorExtractor(\"div.followers\"))\r\n                   .with(new RegexExtractor(\"\\\\d+\"))\r\n                   .asString();\r\n````\r\n\r\nor use static method\r\n\r\n````java\r\nString followers = Extractors.on(baseHtml)\r\n                   .extract(selector(\"div.followers\"))\r\n                   .with(regex(\"\\\\d+\"))\r\n                   .asString();\r\n````\r\n\r\nor short string\r\n\r\n````java\r\nString followers = Extractors.on(baseHtml)\r\n                   .extract(\"selector:div.followers\"))\r\n                   .with(regex(\"\\\\d+\"))\r\n                   .asString();\r\n````\r\n\r\nmore method\r\n\r\n````java\r\n String year = Extractors.on(\"<div> Talk is cheap. Show me the code. - Fri, 25 Aug 2000 </div>\")\r\n                .extract(selector(\"div\")) // extract with selector\r\n                .filter(value -> value.trim()) // trim result\r\n                .with(regex(\"20\\\\d{2}\")) // get year with regex\r\n                .filter(value -> \"from \" + value) // append 'from' string\r\n                .asString();\r\n        Assert.assertEquals(\"from 2000\", year);\r\n````\r\n\r\n###extract data to map\r\n\r\n````java\r\n    @Test\r\n    public void testToMap() throws Exception {\r\n        Map<String, String> dataMap = Extractors.on(baseHtml)\r\n                .extract(\"title\", selector(\"a.title\"))\r\n                .extract(\"followers\", selector(\"div.followers\")).with(regex(\"\\\\d+\"))\r\n                .extract(\"description\", selector(\"div.description\"))\r\n                .asMap();\r\n        Assert.assertEquals(\"fivesmallq\", dataMap.get(\"title\"));\r\n        Assert.assertEquals(\"29671\", dataMap.get(\"followers\"));\r\n        Assert.assertEquals(\"Talk is cheap. Show me the code.\", dataMap.get(\"description\"));\r\n    }\r\n  ````\r\n  \r\n###extract data to map list\r\n\r\n````java\r\n\r\n    @Test\r\n    public void testToMapList() throws Exception {\r\n        //split param must implements ListableExtractor\r\n        List<Map<String, String>> languages = Extractors.on(listHtml)\r\n            .split(selector(\"tr.item.html\"))\r\n                .extract(\"type\", selector(\"td.type\"))\r\n                .extract(\"name\", selector(\"td.name\"))\r\n                .extract(\"url\", selector(\"td.url\"))\r\n                .asMapList();\r\n        Assert.assertNotNull(languages);\r\n        Map<String, String> second = languages.get(1);\r\n        Assert.assertEquals(languages.size(), 3);\r\n        Assert.assertEquals(second.get(\"type\"), \"dynamic\");\r\n        Assert.assertEquals(second.get(\"name\"), \"Ruby\");\r\n        Assert.assertEquals(second.get(\"url\"), \"https://www.ruby-lang.org\");\r\n    }\r\n  ````\r\n  \r\n  \r\n###extract data to bean\r\n\r\n````java\r\n    @Test\r\n    public void testToBean() throws Exception {\r\n        Base base = Extractors.on(baseHtml)\r\n                .extract(\"title\", selector(\"a.title\"))\r\n                .extract(\"followers\", selector(\"div.followers\")).with(regex(\"\\\\d+\"))\r\n                .extract(\"description\", selector(\"div.description\"))\r\n                .asBean(Base.class);\r\n        Assert.assertEquals(\"fivesmallq\", base.getTitle());\r\n        Assert.assertEquals(\"29671\", base.getFollowers());\r\n        Assert.assertEquals(\"Talk is cheap. Show me the code.\", base.getDescription());\r\n    }\r\n````\r\n\r\n###extract data to bean list\r\n\r\n````java\r\n    @Test\r\n    public void testToBeanList() throws Exception {\r\n        List<Language> languages = Extractors.on(listHtml)\r\n            .split(selector(\"tr.item.html\"))\r\n                .extract(\"type\", selector(\"td.type\"))\r\n                .extract(\"name\", selector(\"td.name\"))\r\n                .extract(\"url\", selector(\"td.url\"))\r\n                .asBeanList(Language.class);\r\n        Assert.assertNotNull(languages);\r\n        Language second = languages.get(1);\r\n        Assert.assertEquals(languages.size(), 3);\r\n        Assert.assertEquals(second.getType(), \"dynamic\");\r\n        Assert.assertEquals(second.getName(), \"Ruby\");\r\n        Assert.assertEquals(second.getUrl(), \"https://www.ruby-lang.org\");\r\n    }\r\n````\r\n\r\n###filter\r\n``before`` and ``after`` is the global filter.\r\n\r\n```java\r\n    @Test\r\n    public void testToBeanListFilterBeforeAndAfter() throws Exception {\r\n        List<Language> languages = Extractors.on(listHtml)\r\n                //before and after just process the extract value, then execute the follow filter method.\r\n                .before(value -> \"|before|\" + value)\r\n                .after(value -> value + \"|after|\")\r\n                .split(xpath(\"//tr[@class='item']\"))\r\n                .extract(\"type\", xpath(\"//td[1]/text()\")).filter(value -> \"filter:\" + value)\r\n                .extract(\"name\", xpath(\"//td[2]/text()\")).filter(value -> \"filter:\" + value)\r\n                .extract(\"url\", xpath(\"//td[3]/text()\")).filter(value -> \"filter:\" + value)\r\n                .asBeanList(Language.class);\r\n        Assert.assertNotNull(languages);\r\n        Language second = languages.get(1);\r\n        Assert.assertEquals(languages.size(), 3);\r\n        Assert.assertEquals(second.getType(), \"filter:|before|dynamic|after|\");\r\n        Assert.assertEquals(second.getName(), \"filter:|before|Ruby|after|\");\r\n        Assert.assertEquals(second.getUrl(), \"filter:|before|https://www.ruby-lang.org|after|\");\r\n    }\r\n```\r\n\r\nsee [Example](https://github.com/fivesmallq/web-data-extractor/blob/master/src/test/java/im/nll/data/extractor/ExtractorsTest.java)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}